{"file_contents":{"app.py":{"content":"import os\nimport logging\nfrom flask import Flask\nfrom flask_sqlalchemy import SQLAlchemy\nfrom flask_login import LoginManager\nfrom sqlalchemy.orm import DeclarativeBase\nfrom werkzeug.middleware.proxy_fix import ProxyFix\n\nlogging.basicConfig(level=logging.DEBUG)\n\nclass Base(DeclarativeBase):\n    pass\n\ndb = SQLAlchemy(model_class=Base)\nlogin_manager = LoginManager()\n\n# create the app\napp = Flask(__name__)\napp.secret_key = os.environ.get(\"SESSION_SECRET\", \"dev-secret-key-change-in-production\")\napp.wsgi_app = ProxyFix(app.wsgi_app, x_proto=1, x_host=1)\n\n# configure the database\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = os.environ.get(\"DATABASE_URL\", \"sqlite:///logistics.db\")\napp.config[\"SQLALCHEMY_ENGINE_OPTIONS\"] = {\n    \"pool_recycle\": 300,\n    \"pool_pre_ping\": True,\n}\n\n# initialize extensions\ndb.init_app(app)\nlogin_manager.init_app(app)\nlogin_manager.login_view = 'login'\nlogin_manager.login_message = 'Пожалуйста, войдите в систему для доступа к этой странице.'\n\n@login_manager.user_loader\ndef load_user(user_id):\n    from models import User\n    return User.query.get(int(user_id))\n\n@app.context_processor\ndef inject_csrf_token():\n    \"\"\"Make CSRF token available in all templates\"\"\"\n    from flask_wtf.csrf import generate_csrf\n    return dict(csrf_token=generate_csrf)\n\nwith app.app_context():\n    # Import models to ensure tables are created\n    import models\n    db.create_all()\n    \n    # Create default admin user if it doesn't exist\n    from models import User\n    from werkzeug.security import generate_password_hash\n    \n    admin = User.query.filter_by(username='admin').first()\n    if not admin:\n        admin_user = User(\n            username='admin',\n            email='admin@hrom-kz.com',\n            full_name='Системный администратор',\n            phone='+77771234567',\n            password_hash=generate_password_hash('admin123'),\n            role='logist'\n        )\n        db.session.add(admin_user)\n        db.session.commit()\n        print(\"Created default admin user: admin/admin123\")\n\n# Import routes after app initialization\nimport routes\n","size_bytes":2143},"forms.py":{"content":"from flask_wtf import FlaskForm\nfrom wtforms import StringField, TextAreaField, SelectField, FloatField, PasswordField, EmailField, TelField\nfrom wtforms.validators import DataRequired, Email, Length, Optional, NumberRange\n\nclass OrderForm(FlaskForm):\n    customer_name = StringField('Ф.И.О.', validators=[DataRequired(), Length(min=2, max=100)])\n    customer_phone = TelField('Номер телефона', validators=[DataRequired(), Length(min=10, max=20)])\n    customer_email = EmailField('Email', validators=[Optional(), Email()])\n    \n    pickup_address = TextAreaField('Адрес погрузки', validators=[DataRequired(), Length(min=5, max=500)])\n    pickup_contact = StringField('Контактное лицо на погрузке', validators=[Optional(), Length(max=200)])\n    \n    delivery_address = TextAreaField('Адрес выгрузки', validators=[DataRequired(), Length(min=5, max=500)])\n    delivery_contact = StringField('Контактное лицо на выгрузке', validators=[Optional(), Length(max=200)])\n    \n    cargo_description = TextAreaField('Описание груза', validators=[DataRequired(), Length(min=5, max=1000)])\n    cargo_weight = FloatField('Вес груза (кг)', validators=[Optional(), NumberRange(min=0)])\n    cargo_dimensions = StringField('Габариты груза', validators=[Optional(), Length(max=100)])\n    \n    customer_notes = TextAreaField('Дополнительные комментарии', validators=[Optional(), Length(max=500)])\n\nclass TrackingForm(FlaskForm):\n    tracking_number = StringField('Номер отслеживания', validators=[DataRequired(), Length(min=5, max=20)])\n\nclass RegistrationForm(FlaskForm):\n    username = StringField('Имя пользователя', validators=[DataRequired(), Length(min=3, max=64)])\n    email = EmailField('Email', validators=[DataRequired(), Email()])\n    full_name = StringField('Полное имя', validators=[DataRequired(), Length(min=2, max=100)])\n    phone = TelField('Номер телефона', validators=[DataRequired(), Length(min=10, max=20)])\n    password = PasswordField('Пароль', validators=[DataRequired(), Length(min=6)])\n\nclass LoginForm(FlaskForm):\n    username = StringField('Имя пользователя', validators=[DataRequired()])\n    password = PasswordField('Пароль', validators=[DataRequired()])\n\nclass OrderEditForm(FlaskForm):\n    status = SelectField('Статус', choices=[\n        ('new', 'Новая заявка'),\n        ('confirmed', 'Подтверждена'),\n        ('in_progress', 'В пути'),\n        ('delivered', 'Доставлена'),\n        ('cancelled', 'Отменена')\n    ], validators=[DataRequired()])\n    \n    price = FloatField('Цена', validators=[Optional(), NumberRange(min=0)])\n    driver_id = SelectField('Водитель', coerce=int, validators=[Optional()])\n    internal_comments = TextAreaField('Внутренние комментарии', validators=[Optional(), Length(max=1000)])\n    \n    # Allow editing of contact info and addresses\n    customer_phone = TelField('Номер телефона', validators=[DataRequired(), Length(min=10, max=20)])\n    customer_email = EmailField('Email', validators=[Optional(), Email()])\n    pickup_address = TextAreaField('Адрес погрузки', validators=[DataRequired(), Length(min=5, max=500)])\n    pickup_contact = StringField('Контактное лицо на погрузке', validators=[Optional(), Length(max=200)])\n    delivery_address = TextAreaField('Адрес выгрузки', validators=[DataRequired(), Length(min=5, max=500)])\n    delivery_contact = StringField('Контактное лицо на выгрузке', validators=[Optional(), Length(max=200)])\n\nclass DriverForm(FlaskForm):\n    name = StringField('Имя водителя', validators=[DataRequired(), Length(min=2, max=100)])\n    phone = TelField('Номер телефона', validators=[DataRequired(), Length(min=10, max=20)])\n    vehicle_info = StringField('Информация о транспорте', validators=[Optional(), Length(max=200)])\n","size_bytes":4143},"main.py":{"content":"from app import app\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000, debug=True)\n","size_bytes":99},"models.py":{"content":"from datetime import datetime\nfrom app import db\nfrom flask_login import UserMixin\nfrom sqlalchemy import Text\n\nclass User(UserMixin, db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    username = db.Column(db.String(64), unique=True, nullable=False)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    full_name = db.Column(db.String(100), nullable=False)\n    phone = db.Column(db.String(20), nullable=False)\n    password_hash = db.Column(db.String(256), nullable=False)\n    role = db.Column(db.String(20), default='employee')  # employee, logist\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    \n    # Relationship to orders\n    orders = db.relationship('Order', backref='customer', lazy=True, foreign_keys='Order.customer_id')\n\nclass Driver(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(100), nullable=False)\n    phone = db.Column(db.String(20), nullable=False)\n    vehicle_info = db.Column(db.String(200))\n    is_active = db.Column(db.Boolean, default=True)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    \n    # Relationship to orders\n    orders = db.relationship('Order', backref='assigned_driver', lazy=True)\n\nclass Order(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    tracking_number = db.Column(db.String(20), unique=True, nullable=False)\n    \n    # Customer information\n    customer_name = db.Column(db.String(100), nullable=False)\n    customer_phone = db.Column(db.String(20), nullable=False)\n    customer_email = db.Column(db.String(120))\n    customer_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=True)  # For registered users\n    \n    # Shipping type and addresses\n    shipping_type = db.Column(db.String(20), nullable=False)  # astana, kazakhstan\n    pickup_address = db.Column(Text, nullable=False)\n    pickup_contact = db.Column(db.String(200))\n    delivery_address = db.Column(Text, nullable=False)\n    delivery_contact = db.Column(db.String(200))\n    \n    # Cargo information\n    cargo_description = db.Column(Text, nullable=False)\n    cargo_weight = db.Column(db.Float)\n    cargo_dimensions = db.Column(db.String(100))\n    \n    # Order management\n    status = db.Column(db.String(30), default='new')  # new, confirmed, in_progress, delivered, cancelled\n    price = db.Column(db.Float)\n    driver_id = db.Column(db.Integer, db.ForeignKey('driver.id'), nullable=True)\n    \n    # Comments and notes\n    customer_notes = db.Column(Text)\n    internal_comments = db.Column(Text)\n    \n    # Timestamps\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)\n    \n    def get_status_display(self):\n        status_map = {\n            'new': 'Новая заявка',\n            'confirmed': 'Подтверждена',\n            'in_progress': 'В пути',\n            'delivered': 'Доставлена',\n            'cancelled': 'Отменена'\n        }\n        return status_map.get(self.status, self.status)\n    \n    def get_shipping_type_display(self):\n        type_map = {\n            'astana': 'Отгрузка по Астане',\n            'kazakhstan': 'Отгрузка по Казахстану'\n        }\n        return type_map.get(self.shipping_type, self.shipping_type)\n","size_bytes":3359},"pyproject.toml":{"content":"[project]\nname = \"repl-nix-workspace\"\nversion = \"0.1.0\"\ndescription = \"Add your description here\"\nrequires-python = \">=3.11\"\ndependencies = [\n    \"email-validator>=2.2.0\",\n    \"flask-wtf>=1.2.2\",\n    \"flask>=3.1.1\",\n    \"flask-sqlalchemy>=3.1.1\",\n    \"gunicorn>=23.0.0\",\n    \"psycopg2-binary>=2.9.10\",\n    \"wtforms>=3.2.1\",\n    \"flask-login>=0.6.3\",\n    \"requests>=2.32.4\",\n    \"sqlalchemy>=2.0.43\",\n    \"werkzeug>=3.1.3\",\n]\n","size_bytes":425},"replit.md":{"content":"# Хром-КЗ Logistics Management System\n\n## Overview\n\nВнутренняя система управления логистикой для департамента логистики компании \"Хром-КЗ\". Система автоматизирует управление заказами и отслеживание грузоперевозок по Астане и по всему Казахстану. Приложение включает публичный интерфейс для клиентов для подачи заказов и отслеживания отправлений, а также административную панель для сотрудников для управления заказами, назначения водителей и создания отчетов.\n\nThis is an internal corporate product specifically designed for Chrome-KZ company's logistics department. The system supports two types of deliveries: local Astana deliveries and nationwide Kazakhstan shipments. It includes role-based access control, automated notifications via Telegram, and comprehensive analytics for business insights.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\nUI/UX Design: Modern design patterns with contemporary colors, enhanced animations, dark theme support, improved typography using Inter font family, glassmorphism effects, and enhanced user interactions.\n\n## System Architecture\n\n### Frontend Architecture\n- **Template Engine**: Jinja2 templates with Bootstrap 5 for responsive design\n- **Styling**: Custom CSS with Font Awesome icons and modern, minimalist white-based design\n- **Client-side**: Vanilla JavaScript for form validation, phone formatting, and interactive features\n- **Charts**: Chart.js for analytics visualization\n\n### Backend Architecture\n- **Framework**: Flask web framework with modular structure\n- **Authentication**: Flask-Login for session management with role-based access control\n- **Forms**: Flask-WTF for secure form handling and CSRF protection\n- **Database ORM**: SQLAlchemy with declarative base for database operations\n- **Middleware**: ProxyFix for handling reverse proxy headers\n\n### Data Model\n- **Users**: Employee and logist roles with authentication and profile management\n- **Orders**: Comprehensive order tracking with status management, customer info, and shipping details\n- **Drivers**: Driver management with vehicle information and assignment tracking\n- **Relationships**: Foreign key relationships between users, orders, and drivers\n\n### Security Features\n- **Session Management**: Secure session handling with configurable secret keys\n- **Form Validation**: Server-side validation with WTForms\n- **CSRF Protection**: Built-in CSRF token validation\n- **Password Hashing**: Werkzeug security for password management\n\n### Business Logic\n- **Order Workflow**: Multi-status order lifecycle (new, confirmed, in_progress, delivered, cancelled)\n- **Role-based Access**: Different permissions for employees vs logists\n- **Tracking System**: Unique tracking number generation and customer tracking interface\n- **Notification System**: Automated notifications for order updates\n\n## External Dependencies\n\n### Database\n- **SQLite**: Primary database with fallback to local file storage\n- **PostgreSQL**: Configurable via DATABASE_URL environment variable\n- **Connection Pooling**: Configured with pool recycling and pre-ping for reliability\n\n### Messaging Services\n- **Telegram Bot API**: Integration for automated order notifications to logistics team\n- **SMS Service**: Placeholder integration for customer SMS notifications (SMS.ru, SMSC.ru compatible)\n\n### Third-party Libraries\n- **Bootstrap 5**: Frontend CSS framework for responsive design\n- **Font Awesome**: Icon library for UI elements\n- **Chart.js**: JavaScript charting library for analytics dashboards\n\n### Environment Configuration\n- **SESSION_SECRET**: Configurable session encryption key\n- **DATABASE_URL**: Database connection string (supports SQLite and PostgreSQL)\n- **TELEGRAM_BOT_TOKEN**: Bot token for Telegram notifications\n- **TELEGRAM_CHAT_ID**: Target chat/channel for notifications\n\n### Deployment Considerations\n- **WSGI**: Flask WSGI application with ProxyFix middleware\n- **Static Assets**: CDN-hosted Bootstrap, Font Awesome, and Chart.js\n- **File Structure**: Modular organization with separate routes, models, forms, and utilities","size_bytes":4433},"routes.py":{"content":"from flask import render_template, request, redirect, url_for, flash, jsonify\nfrom flask_login import login_user, logout_user, login_required, current_user\nfrom werkzeug.security import generate_password_hash, check_password_hash\nfrom datetime import datetime, timedelta\nfrom sqlalchemy import func, desc, and_\nimport json\n\nfrom app import app, db\nfrom models import User, Order, Driver\nfrom forms import OrderForm, TrackingForm, RegistrationForm, LoginForm, OrderEditForm, DriverForm\nfrom utils import generate_tracking_number, send_telegram_notification\nfrom telegram_bot import send_order_notification\n\n@app.route('/')\ndef index():\n    return render_template('index.html')\n\n@app.route('/order/<shipping_type>', methods=['GET', 'POST'])\ndef create_order(shipping_type):\n    if shipping_type not in ['astana', 'kazakhstan']:\n        flash('Недопустимый тип отгрузки', 'error')\n        return redirect(url_for('index'))\n    \n    form = OrderForm()\n    \n    if form.validate_on_submit():\n        # Generate unique tracking number\n        tracking_number = generate_tracking_number()\n        \n        # Create new order\n        order = Order(\n            tracking_number=tracking_number,\n            customer_name=form.customer_name.data,\n            customer_phone=form.customer_phone.data,\n            customer_email=form.customer_email.data,\n            shipping_type=shipping_type,\n            pickup_address=form.pickup_address.data,\n            pickup_contact=form.pickup_contact.data,\n            delivery_address=form.delivery_address.data,\n            delivery_contact=form.delivery_contact.data,\n            cargo_description=form.cargo_description.data,\n            cargo_weight=form.cargo_weight.data,\n            cargo_dimensions=form.cargo_dimensions.data,\n            customer_notes=form.customer_notes.data,\n            status='new'\n        )\n        \n        # Link to user if logged in\n        if current_user.is_authenticated:\n            order.customer_id = current_user.id\n        \n        db.session.add(order)\n        db.session.commit()\n        \n        # Send Telegram notification\n        send_order_notification(order)\n        \n        flash(f'Ваша заявка принята! Номер отслеживания: {tracking_number}', 'success')\n        return redirect(url_for('track_order', tracking_number=tracking_number))\n    \n    shipping_title = 'Отгрузка по Астане' if shipping_type == 'astana' else 'Отгрузка по Казахстану'\n    return render_template('order_form.html', form=form, shipping_type=shipping_type, shipping_title=shipping_title)\n\n@app.route('/track')\n@app.route('/track/<tracking_number>')\ndef track_order(tracking_number=None):\n    form = TrackingForm()\n    order = None\n    \n    if tracking_number:\n        order = Order.query.filter_by(tracking_number=tracking_number).first()\n        if not order:\n            flash('Заказ с указанным номером не найден', 'error')\n    \n    return render_template('track_order.html', form=form, order=order, tracking_number=tracking_number)\n\n@app.route('/track_search', methods=['POST'])\ndef track_search():\n    form = TrackingForm()\n    if form.validate_on_submit():\n        return redirect(url_for('track_order', tracking_number=form.tracking_number.data))\n    return redirect(url_for('track_order'))\n\n@app.route('/register', methods=['GET', 'POST'])\ndef register():\n    if current_user.is_authenticated:\n        return redirect(url_for('profile'))\n    \n    form = RegistrationForm()\n    \n    if form.validate_on_submit():\n        # Check if username or email already exists\n        existing_user = User.query.filter(\n            (User.username == form.username.data) | (User.email == form.email.data)\n        ).first()\n        \n        if existing_user:\n            flash('Пользователь с таким именем или email уже существует', 'error')\n            return render_template('register.html', form=form)\n        \n        # Create new user\n        user = User(\n            username=form.username.data,\n            email=form.email.data,\n            full_name=form.full_name.data,\n            phone=form.phone.data,\n            password_hash=generate_password_hash(form.password.data),\n            role='employee'\n        )\n        \n        db.session.add(user)\n        db.session.commit()\n        \n        login_user(user)\n        flash('Регистрация успешно завершена!', 'success')\n        return redirect(url_for('profile'))\n    \n    return render_template('register.html', form=form)\n\n@app.route('/login', methods=['GET', 'POST'])\ndef login():\n    if current_user.is_authenticated:\n        return redirect(url_for('admin_dashboard'))\n    \n    form = LoginForm()\n    \n    if form.validate_on_submit():\n        user = User.query.filter_by(username=form.username.data).first()\n        \n        if user and check_password_hash(user.password_hash, form.password.data):\n            login_user(user)\n            flash('Вы успешно вошли в систему!', 'success')\n            \n            next_page = request.args.get('next')\n            if next_page:\n                return redirect(next_page)\n            return redirect(url_for('admin_dashboard'))\n        else:\n            flash('Неверное имя пользователя или пароль', 'error')\n    \n    return render_template('login.html', form=form)\n\n@app.route('/logout')\n@login_required\ndef logout():\n    logout_user()\n    flash('Вы вышли из системы', 'info')\n    return redirect(url_for('index'))\n\n@app.route('/profile')\n@login_required\ndef profile():\n    # Get user's orders\n    orders = Order.query.filter_by(customer_id=current_user.id).order_by(desc(Order.created_at)).all()\n    return render_template('profile.html', orders=orders)\n\n# Admin routes\n@app.route('/admin')\n@login_required\ndef admin_dashboard():\n    # Get basic statistics\n    total_orders = Order.query.count()\n    new_orders = Order.query.filter_by(status='new').count()\n    in_progress_orders = Order.query.filter_by(status='in_progress').count()\n    delivered_orders = Order.query.filter_by(status='delivered').count()\n    \n    # Recent orders\n    recent_orders = Order.query.order_by(desc(Order.created_at)).limit(10).all()\n    \n    # Revenue statistics\n    total_revenue = db.session.query(func.sum(Order.price)).filter(Order.price.isnot(None)).scalar() or 0\n    avg_order_value = db.session.query(func.avg(Order.price)).filter(Order.price.isnot(None)).scalar() or 0\n    \n    return render_template('admin/dashboard.html',\n                         total_orders=total_orders,\n                         new_orders=new_orders,\n                         in_progress_orders=in_progress_orders,\n                         delivered_orders=delivered_orders,\n                         recent_orders=recent_orders,\n                         total_revenue=total_revenue,\n                         avg_order_value=avg_order_value)\n\n@app.route('/admin/orders')\n@login_required\ndef admin_orders():\n    # Filter parameters\n    status_filter = request.args.get('status', '')\n    shipping_type_filter = request.args.get('shipping_type', '')\n    date_from = request.args.get('date_from', '')\n    date_to = request.args.get('date_to', '')\n    \n    # Build query\n    query = Order.query\n    \n    # Apply filters based on user role\n    if current_user.role == 'employee':\n        query = query.filter_by(customer_id=current_user.id)\n    \n    if status_filter:\n        query = query.filter_by(status=status_filter)\n    \n    if shipping_type_filter:\n        query = query.filter_by(shipping_type=shipping_type_filter)\n    \n    if date_from:\n        try:\n            date_from_obj = datetime.strptime(date_from, '%Y-%m-%d')\n            query = query.filter(Order.created_at >= date_from_obj)\n        except ValueError:\n            pass\n    \n    if date_to:\n        try:\n            date_to_obj = datetime.strptime(date_to, '%Y-%m-%d') + timedelta(days=1)\n            query = query.filter(Order.created_at < date_to_obj)\n        except ValueError:\n            pass\n    \n    orders = query.order_by(desc(Order.created_at)).all()\n    \n    return render_template('admin/orders.html', orders=orders,\n                         status_filter=status_filter,\n                         shipping_type_filter=shipping_type_filter,\n                         date_from=date_from,\n                         date_to=date_to)\n\n@app.route('/admin/orders/<int:order_id>/edit', methods=['GET', 'POST'])\n@login_required\ndef edit_order(order_id):\n    order = Order.query.get_or_404(order_id)\n    \n    # Check permissions\n    if current_user.role == 'employee' and order.customer_id != current_user.id:\n        flash('У вас нет прав для редактирования этого заказа', 'error')\n        return redirect(url_for('admin_orders'))\n    \n    form = OrderEditForm()\n    \n    # Populate driver choices\n    drivers = Driver.query.filter_by(is_active=True).all()\n    form.driver_id.choices = [(0, 'Не назначен')] + [(d.id, f'{d.name} ({d.phone})') for d in drivers]\n    \n    if form.validate_on_submit():\n        # Update order fields based on user role\n        if current_user.role == 'logist':\n            order.status = form.status.data\n            order.price = form.price.data\n            order.driver_id = form.driver_id.data if form.driver_id.data != 0 else None\n            order.internal_comments = form.internal_comments.data\n        \n        # Both roles can update contact info\n        order.customer_phone = form.customer_phone.data\n        order.customer_email = form.customer_email.data\n        order.pickup_address = form.pickup_address.data\n        order.pickup_contact = form.pickup_contact.data\n        order.delivery_address = form.delivery_address.data\n        order.delivery_contact = form.delivery_contact.data\n        order.updated_at = datetime.utcnow()\n        \n        db.session.commit()\n        flash('Заказ успешно обновлен!', 'success')\n        return redirect(url_for('admin_orders'))\n    \n    # Pre-populate form\n    if request.method == 'GET':\n        form.status.data = order.status\n        form.price.data = order.price\n        form.driver_id.data = order.driver_id or 0\n        form.internal_comments.data = order.internal_comments\n        form.customer_phone.data = order.customer_phone\n        form.customer_email.data = order.customer_email\n        form.pickup_address.data = order.pickup_address\n        form.pickup_contact.data = order.pickup_contact\n        form.delivery_address.data = order.delivery_address\n        form.delivery_contact.data = order.delivery_contact\n    \n    return render_template('admin/edit_order.html', form=form, order=order)\n\n@app.route('/admin/analytics')\n@login_required\ndef analytics():\n    if current_user.role != 'logist':\n        flash('У вас нет доступа к аналитике', 'error')\n        return redirect(url_for('admin_dashboard'))\n    \n    # Date range for analytics (last 30 days by default)\n    end_date = datetime.utcnow()\n    start_date = end_date - timedelta(days=30)\n    \n    # Orders by status\n    status_stats = db.session.query(\n        Order.status,\n        func.count(Order.id).label('count')\n    ).filter(Order.created_at >= start_date).group_by(Order.status).all()\n    \n    # Orders by shipping type\n    shipping_stats = db.session.query(\n        Order.shipping_type,\n        func.count(Order.id).label('count'),\n        func.sum(Order.price).label('revenue')\n    ).filter(Order.created_at >= start_date).group_by(Order.shipping_type).all()\n    \n    # Daily orders for the last 30 days\n    daily_orders = db.session.query(\n        func.date(Order.created_at).label('date'),\n        func.count(Order.id).label('count'),\n        func.sum(Order.price).label('revenue')\n    ).filter(Order.created_at >= start_date).group_by(func.date(Order.created_at)).all()\n    \n    # Driver performance\n    driver_stats = db.session.query(\n        Driver.name,\n        func.count(Order.id).label('orders_count'),\n        func.sum(Order.price).label('total_revenue')\n    ).join(Order, Driver.id == Order.driver_id).filter(\n        Order.created_at >= start_date\n    ).group_by(Driver.id, Driver.name).all()\n    \n    # Cost analysis\n    total_revenue = db.session.query(func.sum(Order.price)).filter(\n        and_(Order.created_at >= start_date, Order.price.isnot(None))\n    ).scalar() or 0\n    \n    avg_order_value = db.session.query(func.avg(Order.price)).filter(\n        and_(Order.created_at >= start_date, Order.price.isnot(None))\n    ).scalar() or 0\n    \n    total_orders = Order.query.filter(Order.created_at >= start_date).count()\n    \n    return render_template('admin/analytics.html',\n                         status_stats=status_stats,\n                         shipping_stats=shipping_stats,\n                         daily_orders=daily_orders,\n                         driver_stats=driver_stats,\n                         total_revenue=total_revenue,\n                         avg_order_value=avg_order_value,\n                         total_orders=total_orders,\n                         start_date=start_date,\n                         end_date=end_date)\n\n@app.route('/admin/analytics/data')\n@login_required\ndef analytics_data():\n    \"\"\"API endpoint for chart data\"\"\"\n    if current_user.role != 'logist':\n        return jsonify({'error': 'Access denied'}), 403\n    \n    # Get data for charts\n    end_date = datetime.utcnow()\n    start_date = end_date - timedelta(days=30)\n    \n    # Daily orders data\n    daily_data = db.session.query(\n        func.date(Order.created_at).label('date'),\n        func.count(Order.id).label('orders'),\n        func.coalesce(func.sum(Order.price), 0).label('revenue')\n    ).filter(Order.created_at >= start_date).group_by(func.date(Order.created_at)).all()\n    \n    # Status distribution\n    status_data = db.session.query(\n        Order.status,\n        func.count(Order.id).label('count')\n    ).filter(Order.created_at >= start_date).group_by(Order.status).all()\n    \n    return jsonify({\n        'daily_orders': [\n            {\n                'date': str(row.date),\n                'orders': row.orders,\n                'revenue': float(row.revenue or 0)\n            } for row in daily_data\n        ],\n        'status_distribution': [\n            {\n                'status': row.status,\n                'count': row.count,\n                'label': Order().get_status_display() if hasattr(Order(), 'get_status_display') else row.status\n            } for row in status_data\n        ]\n    })\n\n# Driver management routes\n@app.route('/admin/drivers')\n@login_required\ndef admin_drivers():\n    if current_user.role != 'logist':\n        flash('У вас нет доступа к управлению водителями', 'error')\n        return redirect(url_for('admin_dashboard'))\n    \n    drivers = Driver.query.all()\n    return render_template('admin/drivers.html', drivers=drivers)\n\n@app.route('/admin/drivers/new', methods=['GET', 'POST'])\n@login_required\ndef add_driver():\n    if current_user.role != 'logist':\n        flash('У вас нет прав для добавления водителей', 'error')\n        return redirect(url_for('admin_dashboard'))\n    \n    form = DriverForm()\n    \n    if form.validate_on_submit():\n        driver = Driver(\n            name=form.name.data,\n            phone=form.phone.data,\n            vehicle_info=form.vehicle_info.data\n        )\n        \n        db.session.add(driver)\n        db.session.commit()\n        \n        flash('Водитель успешно добавлен!', 'success')\n        return redirect(url_for('admin_drivers'))\n    \n    return render_template('admin/edit_driver.html', form=form, driver=None)\n\n@app.errorhandler(404)\ndef not_found_error(error):\n    return render_template('404.html'), 404\n\n@app.errorhandler(500)\ndef internal_error(error):\n    db.session.rollback()\n    return render_template('500.html'), 500\n","size_bytes":16034},"telegram_bot.py":{"content":"import os\nfrom utils import send_telegram_notification\n\ndef send_order_notification(order):\n    \"\"\"Send new order notification to Telegram\"\"\"\n    message = f\"\"\"\n🚚 <b>Новая заявка #{order.tracking_number}</b>\n\n👤 <b>Клиент:</b> {order.customer_name}\n📱 <b>Телефон:</b> {order.customer_phone}\n📧 <b>Email:</b> {order.customer_email or 'Не указан'}\n\n📍 <b>Тип доставки:</b> {order.get_shipping_type_display()}\n\n📦 <b>Описание груза:</b> {order.cargo_description}\n⚖️ <b>Вес:</b> {order.cargo_weight or 'Не указан'} кг\n📏 <b>Габариты:</b> {order.cargo_dimensions or 'Не указаны'}\n\n🏠 <b>Адрес погрузки:</b> {order.pickup_address}\n🏢 <b>Адрес выгрузки:</b> {order.delivery_address}\n\n📝 <b>Комментарии:</b> {order.customer_notes or 'Нет'}\n\n⏰ <b>Время создания:</b> {order.created_at.strftime('%d.%m.%Y %H:%M')}\n    \"\"\"\n    \n    return send_telegram_notification(message.strip())\n\ndef send_status_update(order, old_status, new_status):\n    \"\"\"Send order status update notification\"\"\"\n    status_map = {\n        'new': 'Новая заявка',\n        'confirmed': 'Подтверждена',\n        'in_progress': 'В пути',\n        'delivered': 'Доставлена',\n        'cancelled': 'Отменена'\n    }\n    \n    message = f\"\"\"\n📊 <b>Изменение статуса заказа #{order.tracking_number}</b>\n\n👤 <b>Клиент:</b> {order.customer_name}\n📱 <b>Телефон:</b> {order.customer_phone}\n\n📈 <b>Статус изменен:</b> {status_map.get(old_status, old_status)} → {status_map.get(new_status, new_status)}\n\n💰 <b>Цена:</b> {f'{order.price} ₸' if order.price else 'Не назначена'}\n🚛 <b>Водитель:</b> {order.assigned_driver.name if order.assigned_driver else 'Не назначен'}\n    \"\"\"\n    \n    return send_telegram_notification(message.strip())\n","size_bytes":1990},"utils.py":{"content":"import random\nimport string\nimport requests\nimport os\nfrom datetime import datetime\n\ndef generate_tracking_number():\n    \"\"\"Generate a unique tracking number\"\"\"\n    timestamp = datetime.now().strftime('%y%m%d')\n    random_part = ''.join(random.choices(string.ascii_uppercase + string.digits, k=6))\n    return f'HK{timestamp}{random_part}'\n\ndef send_sms_notification(phone, message):\n    \"\"\"Send SMS notification (placeholder for SMS service integration)\"\"\"\n    # This would integrate with an SMS service like SMS.ru, SMSC.ru, etc.\n    # For now, we'll just log the message\n    print(f\"SMS to {phone}: {message}\")\n    return True\n\ndef format_phone_number(phone):\n    \"\"\"Format phone number for display\"\"\"\n    # Remove all non-digit characters\n    digits_only = ''.join(filter(str.isdigit, phone))\n    \n    # Format as +7 (XXX) XXX-XX-XX for Kazakhstan numbers\n    if digits_only.startswith('7') and len(digits_only) == 11:\n        return f\"+7 ({digits_only[1:4]}) {digits_only[4:7]}-{digits_only[7:9]}-{digits_only[9:11]}\"\n    elif digits_only.startswith('8') and len(digits_only) == 11:\n        return f\"+7 ({digits_only[1:4]}) {digits_only[4:7]}-{digits_only[7:9]}-{digits_only[9:11]}\"\n    else:\n        return phone\n\ndef format_currency(amount):\n    \"\"\"Format currency amount in Tenge\"\"\"\n    if amount is None:\n        return \"Не указана\"\n    return f\"{amount:,.0f} ₸\"\n\ndef send_telegram_notification(message):\n    \"\"\"Send notification to Telegram channel/group\"\"\"\n    bot_token = os.environ.get('TELEGRAM_BOT_TOKEN')\n    chat_id = os.environ.get('TELEGRAM_CHAT_ID')\n    \n    if not bot_token or not chat_id:\n        print(f\"Telegram notification: {message}\")\n        return False\n    \n    url = f\"https://api.telegram.org/bot{bot_token}/sendMessage\"\n    data = {\n        'chat_id': chat_id,\n        'text': message,\n        'parse_mode': 'HTML'\n    }\n    \n    try:\n        response = requests.post(url, data=data, timeout=10)\n        return response.status_code == 200\n    except Exception as e:\n        print(f\"Failed to send Telegram notification: {e}\")\n        return False\n","size_bytes":2091},"static/css/style.css":{"content":"/* Modern CSS for Хром-КЗ Logistics System - Enhanced UI/UX */\n\n:root {\n    /* Primary color palette - Modern blue gradient */\n    --primary-color: #2563eb;\n    --primary-light: #3b82f6;\n    --primary-dark: #1d4ed8;\n    --secondary-color: #64748b;\n    --success-color: #10b981;\n    --warning-color: #f59e0b;\n    --danger-color: #ef4444;\n    --info-color: #0ea5e9;\n    \n    /* Neutral colors */\n    --light-color: #f8fafc;\n    --lighter-color: #f1f5f9;\n    --dark-color: #1e293b;\n    --darker-color: #0f172a;\n    --border-color: #e2e8f0;\n    --text-muted: #64748b;\n    \n    /* Modern spacing and effects */\n    --border-radius: 0.75rem;\n    --border-radius-lg: 1rem;\n    --border-radius-xl: 1.5rem;\n    --box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1), 0 1px 2px rgba(0, 0, 0, 0.06);\n    --box-shadow-md: 0 4px 6px rgba(0, 0, 0, 0.1), 0 2px 4px rgba(0, 0, 0, 0.06);\n    --box-shadow-lg: 0 10px 15px rgba(0, 0, 0, 0.1), 0 4px 6px rgba(0, 0, 0, 0.05);\n    --box-shadow-xl: 0 20px 25px rgba(0, 0, 0, 0.1), 0 10px 10px rgba(0, 0, 0, 0.04);\n    \n    /* Transitions */\n    --transition-base: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);\n    --transition-slow: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n    \n    /* Glass morphism effect */\n    --glass-bg: rgba(255, 255, 255, 0.25);\n    --glass-border: rgba(255, 255, 255, 0.18);\n}\n\n/* Global Styles - Modern typography and layout */\nbody {\n    font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', sans-serif;\n    line-height: 1.6;\n    color: var(--dark-color);\n    background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);\n    min-height: 100vh;\n    font-weight: 400;\n    font-size: 0.95rem;\n    letter-spacing: -0.01em;\n}\n\n/* Typography improvements */\nh1, h2, h3, h4, h5, h6 {\n    font-weight: 600;\n    letter-spacing: -0.025em;\n    color: var(--dark-color);\n}\n\n.display-1, .display-2, .display-3, .display-4, .display-5, .display-6 {\n    font-weight: 700;\n    letter-spacing: -0.02em;\n}\n\n/* Text utilities */\n.text-muted {\n    color: var(--text-muted) !important;\n}\n\np {\n    color: var(--text-muted);\n    font-size: 0.95rem;\n}\n\n/* Custom scrollbar */\n::-webkit-scrollbar {\n    width: 8px;\n}\n\n::-webkit-scrollbar-track {\n    background: var(--light-color);\n}\n\n::-webkit-scrollbar-thumb {\n    background: var(--secondary-color);\n    border-radius: 4px;\n}\n\n::-webkit-scrollbar-thumb:hover {\n    background: var(--dark-color);\n}\n\n/* Modern Navigation with glassmorphism */\n.navbar {\n    background: rgba(255, 255, 255, 0.95) !important;\n    backdrop-filter: blur(20px);\n    -webkit-backdrop-filter: blur(20px);\n    border-bottom: 1px solid var(--border-color);\n    box-shadow: var(--box-shadow);\n    transition: var(--transition-base);\n    padding: 1rem 0;\n}\n\n.navbar-brand {\n    font-size: 1.5rem;\n    font-weight: 700;\n    color: var(--primary-color) !important;\n    transition: var(--transition-base);\n}\n\n.navbar-brand:hover {\n    transform: scale(1.02);\n    color: var(--primary-dark) !important;\n}\n\n.nav-link {\n    font-weight: 500;\n    color: var(--dark-color) !important;\n    transition: var(--transition-base);\n    position: relative;\n    padding: 0.5rem 1rem !important;\n}\n\n.nav-link:hover, .nav-link:focus {\n    color: var(--primary-color) !important;\n}\n\n.nav-link::after {\n    content: '';\n    position: absolute;\n    bottom: 0;\n    left: 50%;\n    width: 0;\n    height: 2px;\n    background: var(--primary-color);\n    transition: var(--transition-base);\n    transform: translateX(-50%);\n}\n\n.nav-link:hover::after {\n    width: 80%;\n}\n\n/* Modern Cards with enhanced effects */\n.card {\n    border-radius: var(--border-radius-lg);\n    border: 1px solid var(--border-color);\n    background: #ffffff;\n    transition: var(--transition-slow);\n    overflow: hidden;\n    box-shadow: var(--box-shadow);\n}\n\n.card.hover-lift:hover {\n    transform: translateY(-8px) scale(1.02);\n    box-shadow: var(--box-shadow-xl);\n    border-color: var(--primary-color);\n}\n\n.card-body {\n    padding: 2rem;\n}\n\n/* Glass morphism cards */\n.card-glass {\n    background: var(--glass-bg);\n    backdrop-filter: blur(20px);\n    -webkit-backdrop-filter: blur(20px);\n    border: 1px solid var(--glass-border);\n    box-shadow: var(--box-shadow-lg);\n}\n\n/* Service cards enhancement */\n.service-card {\n    position: relative;\n    overflow: hidden;\n}\n\n.service-card::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: -100%;\n    width: 100%;\n    height: 100%;\n    background: linear-gradient(90deg, transparent, rgba(37, 99, 235, 0.1), transparent);\n    transition: var(--transition-slow);\n}\n\n.service-card:hover::before {\n    left: 100%;\n}\n\n.service-card .service-icon {\n    transition: transform 0.3s ease;\n}\n\n.service-card:hover .service-icon {\n    transform: scale(1.1);\n}\n\n/* Modern Hero Section with animated background */\n.hero-section {\n    background: linear-gradient(135deg, var(--primary-color) 0%, var(--primary-dark) 50%, #1e40af 100%);\n    min-height: 600px;\n    display: flex;\n    align-items: center;\n    position: relative;\n    overflow: hidden;\n}\n\n.hero-section::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background: url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 1000 1000\"><circle cx=\"200\" cy=\"200\" r=\"2\" fill=\"rgba(255,255,255,0.1)\"/><circle cx=\"600\" cy=\"400\" r=\"3\" fill=\"rgba(255,255,255,0.08)\"/><circle cx=\"800\" cy=\"100\" r=\"2\" fill=\"rgba(255,255,255,0.1)\"/><circle cx=\"300\" cy=\"700\" r=\"2\" fill=\"rgba(255,255,255,0.05)\"/><circle cx=\"900\" cy=\"600\" r=\"1\" fill=\"rgba(255,255,255,0.1)\"/></svg>');\n    animation: float 20s ease-in-out infinite;\n}\n\n@keyframes float {\n    0%, 100% { transform: translateY(0px) rotate(0deg); }\n    50% { transform: translateY(-20px) rotate(180deg); }\n}\n\n.hero-section .container {\n    position: relative;\n    z-index: 1;\n}\n\n.hero-section h1 {\n    font-size: 3.5rem;\n    font-weight: 800;\n    text-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n    margin-bottom: 1.5rem;\n}\n\n.hero-section .lead {\n    font-size: 1.25rem;\n    font-weight: 400;\n    opacity: 0.95;\n    text-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);\n}\n\n/* Feature Cards */\n.feature-card {\n    padding: 2rem;\n    transition: all 0.3s ease;\n}\n\n.feature-card:hover {\n    transform: translateY(-5px);\n}\n\n.feature-icon {\n    transition: transform 0.3s ease;\n}\n\n.feature-card:hover .feature-icon {\n    transform: scale(1.1);\n}\n\n/* Modern Buttons with enhanced effects */\n.btn {\n    border-radius: var(--border-radius);\n    font-weight: 600;\n    transition: var(--transition-base);\n    border: none;\n    position: relative;\n    overflow: hidden;\n    font-size: 0.95rem;\n    letter-spacing: -0.01em;\n}\n\n.btn:hover {\n    transform: translateY(-2px);\n    box-shadow: var(--box-shadow-md);\n}\n\n.btn:active {\n    transform: translateY(0);\n}\n\n.btn-lg {\n    padding: 1rem 2rem;\n    font-size: 1.1rem;\n    border-radius: var(--border-radius-lg);\n}\n\n/* Primary button */\n.btn-primary {\n    background: linear-gradient(135deg, var(--primary-color) 0%, var(--primary-dark) 100%);\n    box-shadow: var(--box-shadow);\n}\n\n.btn-primary:hover {\n    background: linear-gradient(135deg, var(--primary-dark) 0%, #1e3a8a 100%);\n    box-shadow: var(--box-shadow-lg);\n}\n\n/* Success button */\n.btn-success {\n    background: linear-gradient(135deg, var(--success-color) 0%, #059669 100%);\n    box-shadow: var(--box-shadow);\n}\n\n.btn-success:hover {\n    background: linear-gradient(135deg, #059669 0%, #047857 100%);\n    box-shadow: var(--box-shadow-lg);\n}\n\n/* Outline buttons */\n.btn-outline-primary {\n    border: 2px solid var(--primary-color);\n    color: var(--primary-color);\n    background: transparent;\n}\n\n.btn-outline-primary:hover {\n    background: var(--primary-color);\n    border-color: var(--primary-color);\n    color: white;\n    transform: translateY(-2px);\n}\n\n.btn-outline-light {\n    border: 2px solid rgba(255, 255, 255, 0.3);\n    color: white;\n    background: rgba(255, 255, 255, 0.1);\n    backdrop-filter: blur(10px);\n}\n\n.btn-outline-light:hover {\n    background: rgba(255, 255, 255, 0.2);\n    border-color: rgba(255, 255, 255, 0.5);\n}\n\n/* Button loading state */\n.btn.loading {\n    pointer-events: none;\n    opacity: 0.7;\n}\n\n.btn.loading::after {\n    content: '';\n    position: absolute;\n    width: 16px;\n    height: 16px;\n    margin: auto;\n    border: 2px solid transparent;\n    border-top-color: currentColor;\n    border-radius: 50%;\n    animation: spin 1s linear infinite;\n}\n\n/* Modern Forms with enhanced UX */\n.form-control, .form-select {\n    border-radius: var(--border-radius);\n    border: 2px solid var(--border-color);\n    transition: var(--transition-base);\n    padding: 0.75rem 1rem;\n    font-size: 0.95rem;\n    background: #ffffff;\n    color: var(--dark-color);\n}\n\n.form-control:focus, .form-select:focus {\n    border-color: var(--primary-color);\n    box-shadow: 0 0 0 0.2rem rgba(37, 99, 235, 0.15);\n    outline: none;\n    background: #ffffff;\n}\n\n.form-control:hover:not(:focus), .form-select:hover:not(:focus) {\n    border-color: var(--primary-light);\n}\n\n.form-label {\n    font-weight: 600;\n    color: var(--dark-color);\n    margin-bottom: 0.75rem;\n    font-size: 0.9rem;\n    letter-spacing: -0.01em;\n}\n\n/* Input groups */\n.input-group .form-control {\n    border-radius: 0;\n}\n\n.input-group .form-control:first-child {\n    border-top-left-radius: var(--border-radius);\n    border-bottom-left-radius: var(--border-radius);\n}\n\n.input-group .form-control:last-child {\n    border-top-right-radius: var(--border-radius);\n    border-bottom-right-radius: var(--border-radius);\n}\n\n.input-group-text {\n    background: var(--light-color);\n    border: 2px solid var(--border-color);\n    color: var(--text-muted);\n    font-weight: 500;\n}\n\n/* Form validation */\n.form-control.is-valid {\n    border-color: var(--success-color);\n}\n\n.form-control.is-invalid {\n    border-color: var(--danger-color);\n}\n\n.valid-feedback {\n    color: var(--success-color);\n    font-weight: 500;\n}\n\n.invalid-feedback {\n    color: var(--danger-color);\n    font-weight: 500;\n}\n\n/* Tracking Timeline */\n.timeline {\n    position: relative;\n    padding-left: 3rem;\n}\n\n.timeline::before {\n    content: '';\n    position: absolute;\n    left: 1rem;\n    top: 0;\n    bottom: 0;\n    width: 2px;\n    background: #e9ecef;\n}\n\n.timeline-item {\n    position: relative;\n    margin-bottom: 2rem;\n}\n\n.timeline-marker {\n    position: absolute;\n    left: -2.5rem;\n    top: 0.25rem;\n    width: 1rem;\n    height: 1rem;\n    border-radius: 50%;\n    border: 2px solid #fff;\n    box-shadow: 0 0 0 2px #e9ecef;\n    transition: all 0.3s ease;\n}\n\n.timeline-item.active .timeline-marker {\n    box-shadow: 0 0 0 2px var(--primary-color);\n}\n\n.timeline-content h6 {\n    margin-bottom: 0.25rem;\n    font-weight: 600;\n}\n\n/* Status Badges */\n.badge {\n    font-size: 0.75rem;\n    font-weight: 500;\n    padding: 0.5rem 0.75rem;\n    border-radius: var(--border-radius);\n}\n\n/* Tables */\n.table {\n    border-radius: var(--border-radius);\n    overflow: hidden;\n}\n\n.table th {\n    font-weight: 600;\n    text-transform: uppercase;\n    font-size: 0.8rem;\n    letter-spacing: 0.5px;\n    border-bottom: 2px solid #dee2e6;\n}\n\n.table-hover tbody tr:hover {\n    background-color: rgba(0, 123, 255, 0.05);\n}\n\n/* Admin Panel Specific */\n.nav-pills .nav-link {\n    border-radius: var(--border-radius);\n    margin-right: 0.5rem;\n    font-weight: 500;\n    transition: all 0.3s ease;\n}\n\n.nav-pills .nav-link:hover {\n    background-color: rgba(0, 123, 255, 0.1);\n    color: var(--primary-color);\n}\n\n.nav-pills .nav-link.active {\n    background-color: var(--primary-color);\n}\n\n/* Statistics Cards */\n.card-body .text-primary,\n.card-body .text-success,\n.card-body .text-warning,\n.card-body .text-info,\n.card-body .text-danger {\n    transition: transform 0.3s ease;\n}\n\n.card:hover .card-body .text-primary,\n.card:hover .card-body .text-success,\n.card:hover .card-body .text-warning,\n.card:hover .card-body .text-info,\n.card:hover .card-body .text-danger {\n    transform: scale(1.1);\n}\n\n/* Progress Bars */\n.progress {\n    border-radius: var(--border-radius);\n    overflow: hidden;\n}\n\n.progress-bar {\n    transition: width 0.6s ease;\n}\n\n/* Alerts */\n.alert {\n    border-radius: var(--border-radius);\n    border: none;\n    box-shadow: var(--box-shadow);\n}\n\n.alert-dismissible .btn-close {\n    padding: 1rem 1rem;\n}\n\n/* Loading States */\n.loading {\n    opacity: 0.6;\n    pointer-events: none;\n}\n\n.loading::after {\n    content: '';\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    width: 20px;\n    height: 20px;\n    margin: -10px 0 0 -10px;\n    border: 2px solid #f3f3f3;\n    border-top: 2px solid var(--primary-color);\n    border-radius: 50%;\n    animation: spin 1s linear infinite;\n}\n\n@keyframes spin {\n    0% { transform: rotate(0deg); }\n    100% { transform: rotate(360deg); }\n}\n\n/* Responsive Design */\n@media (max-width: 768px) {\n    .hero-section {\n        text-align: center;\n        padding: 3rem 0;\n    }\n    \n    .hero-section h1 {\n        font-size: 2rem;\n    }\n    \n    .container-fluid {\n        padding-left: 1rem;\n        padding-right: 1rem;\n    }\n    \n    .card-body {\n        padding: 1.5rem !important;\n    }\n    \n    .timeline {\n        padding-left: 2rem;\n    }\n    \n    .timeline-marker {\n        left: -1.5rem;\n    }\n}\n\n@media (max-width: 576px) {\n    .btn-group .btn {\n        padding: 0.25rem 0.5rem;\n        font-size: 0.875rem;\n    }\n    \n    .table-responsive {\n        font-size: 0.875rem;\n    }\n    \n    .badge {\n        font-size: 0.7rem;\n        padding: 0.25rem 0.5rem;\n    }\n}\n\n/* Print Styles */\n@media print {\n    .navbar,\n    .btn,\n    .nav-pills,\n    .dropdown,\n    .alert {\n        display: none !important;\n    }\n    \n    .card {\n        border: 1px solid #dee2e6 !important;\n        box-shadow: none !important;\n    }\n    \n    .table {\n        font-size: 0.8rem;\n    }\n}\n\n/* Enhanced Dark Theme Support */\n.dark-theme {\n    --primary-color: #3b82f6;\n    --primary-light: #60a5fa;\n    --primary-dark: #2563eb;\n    --secondary-color: #9ca3af;\n    --success-color: #34d399;\n    --warning-color: #fbbf24;\n    --danger-color: #f87171;\n    --info-color: #38bdf8;\n    \n    --light-color: #1f2937;\n    --lighter-color: #111827;\n    --dark-color: #f9fafb;\n    --darker-color: #ffffff;\n    --border-color: #374151;\n    --text-muted: #9ca3af;\n}\n\n.dark-theme body {\n    background: linear-gradient(135deg, #0f172a 0%, #1e293b 100%);\n    color: var(--dark-color);\n}\n\n.dark-theme .navbar {\n    background: rgba(15, 23, 42, 0.95) !important;\n    border-bottom-color: var(--border-color);\n}\n\n.dark-theme .card {\n    background: rgba(30, 41, 59, 0.8);\n    border-color: var(--border-color);\n    backdrop-filter: blur(10px);\n}\n\n.dark-theme .hero-section {\n    background: linear-gradient(135deg, #0f172a 0%, #1e293b 50%, #334155 100%);\n}\n\n.dark-theme .form-control,\n.dark-theme .form-select {\n    background: rgba(30, 41, 59, 0.6);\n    border-color: var(--border-color);\n    color: var(--dark-color);\n}\n\n.dark-theme .form-control:focus,\n.dark-theme .form-select:focus {\n    background: rgba(30, 41, 59, 0.8);\n    border-color: var(--primary-color);\n}\n\n.dark-theme .table {\n    color: var(--dark-color);\n    --bs-table-bg: transparent;\n}\n\n.dark-theme .table-hover tbody tr:hover {\n    background-color: rgba(59, 130, 246, 0.1);\n}\n\n.dark-theme footer {\n    background: rgba(15, 23, 42, 0.9) !important;\n    border-top-color: var(--border-color) !important;\n}\n\n/* Smooth theme transition */\nbody,\n.navbar,\n.card,\n.form-control,\n.form-select,\nfooter {\n    transition: background-color 0.3s ease, border-color 0.3s ease, color 0.3s ease;\n}\n\n/* Accessibility */\n@media (prefers-reduced-motion: reduce) {\n    *,\n    *::before,\n    *::after {\n        animation-duration: 0.01ms !important;\n        animation-iteration-count: 1 !important;\n        transition-duration: 0.01ms !important;\n    }\n}\n\n/* Focus States */\n.btn:focus,\n.form-control:focus,\n.form-select:focus {\n    outline: 2px solid var(--primary-color);\n    outline-offset: 2px;\n}\n\n/* Custom Utilities */\n.text-truncate-2 {\n    display: -webkit-box;\n    -webkit-line-clamp: 2;\n    -webkit-box-orient: vertical;\n    overflow: hidden;\n}\n\n.text-truncate-3 {\n    display: -webkit-box;\n    -webkit-line-clamp: 3;\n    -webkit-box-orient: vertical;\n    overflow: hidden;\n}\n\n.shadow-hover {\n    transition: box-shadow 0.3s ease;\n}\n\n.shadow-hover:hover {\n    box-shadow: var(--box-shadow-lg) !important;\n}\n\n/* Enhanced Animations and Micro-interactions */\n@keyframes fadeInUp {\n    from {\n        opacity: 0;\n        transform: translateY(30px);\n    }\n    to {\n        opacity: 1;\n        transform: translateY(0);\n    }\n}\n\n@keyframes slideInRight {\n    from {\n        opacity: 0;\n        transform: translateX(30px);\n    }\n    to {\n        opacity: 1;\n        transform: translateX(0);\n    }\n}\n\n@keyframes scaleIn {\n    from {\n        opacity: 0;\n        transform: scale(0.9);\n    }\n    to {\n        opacity: 1;\n        transform: scale(1);\n    }\n}\n\n@keyframes pulse {\n    0%, 100% {\n        transform: scale(1);\n    }\n    50% {\n        transform: scale(1.05);\n    }\n}\n\n.fade-in-up {\n    animation: fadeInUp 0.6s ease-out;\n}\n\n.slide-in-right {\n    animation: slideInRight 0.5s ease-out;\n}\n\n.scale-in {\n    animation: scaleIn 0.4s ease-out;\n}\n\n.pulse-on-hover:hover {\n    animation: pulse 0.3s ease-in-out;\n}\n\n/* Loading animations */\n.skeleton {\n    background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);\n    background-size: 200% 100%;\n    animation: loading 1.5s infinite;\n}\n\n@keyframes loading {\n    0% {\n        background-position: 200% 0;\n    }\n    100% {\n        background-position: -200% 0;\n    }\n}\n\n.dark-theme .skeleton {\n    background: linear-gradient(90deg, #374151 25%, #4b5563 50%, #374151 75%);\n    background-size: 200% 100%;\n}\n\n/* Page transition effects */\n.page-transition {\n    opacity: 0;\n    transform: translateY(20px);\n    animation: pageEnter 0.5s ease-out forwards;\n}\n\n@keyframes pageEnter {\n    to {\n        opacity: 1;\n        transform: translateY(0);\n    }\n}\n\n/* Enhanced button effects */\n.btn-glow {\n    position: relative;\n    overflow: hidden;\n}\n\n.btn-glow::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: -100%;\n    width: 100%;\n    height: 100%;\n    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);\n    transition: left 0.5s ease;\n}\n\n.btn-glow:hover::before {\n    left: 100%;\n}\n\n/* Notification styles */\n.notification {\n    position: fixed;\n    top: 20px;\n    right: 20px;\n    background: white;\n    border-radius: var(--border-radius-lg);\n    box-shadow: var(--box-shadow-xl);\n    padding: 1rem 1.5rem;\n    transform: translateX(100%);\n    transition: transform 0.3s ease;\n    z-index: 1060;\n}\n\n.notification.show {\n    transform: translateX(0);\n}\n\n.dark-theme .notification {\n    background: var(--light-color);\n    color: var(--dark-color);\n}\n\n/* Status-specific colors */\n.status-new { color: var(--warning-color); }\n.status-confirmed { color: var(--info-color); }\n.status-in-progress { color: var(--primary-color); }\n.status-delivered { color: var(--success-color); }\n.status-cancelled { color: var(--secondary-color); }\n\n.bg-status-new { background-color: var(--warning-color); }\n.bg-status-confirmed { background-color: var(--info-color); }\n.bg-status-in-progress { background-color: var(--primary-color); }\n.bg-status-delivered { background-color: var(--success-color); }\n.bg-status-cancelled { background-color: var(--secondary-color); }\n","size_bytes":19386},"static/js/main.js":{"content":"// Enhanced JavaScript for Хром-КЗ Logistics System - Modern UI/UX\n\n// Initialize when DOM is loaded\ndocument.addEventListener('DOMContentLoaded', function() {\n    initializeTooltips();\n    initializePopovers();\n    initializeFormValidation();\n    initializeAutoRefresh();\n    initializePhoneFormatting();\n    initializeTableSorting();\n    initializeNotifications();\n    initializeModernAnimations();\n    initializeSearchFeatures();\n    initializeThemeToggle();\n    initializeProgressIndicators();\n    initializeKeyboardShortcuts();\n});\n\n// Modern animations and micro-interactions\nfunction initializeModernAnimations() {\n    // Intersection Observer for fade-in animations\n    const observerOptions = {\n        threshold: 0.1,\n        rootMargin: '0px 0px -50px 0px'\n    };\n\n    const observer = new IntersectionObserver((entries) => {\n        entries.forEach(entry => {\n            if (entry.isIntersecting) {\n                entry.target.classList.add('fade-in-up');\n                observer.unobserve(entry.target);\n            }\n        });\n    }, observerOptions);\n\n    // Observe elements for animation\n    document.querySelectorAll('.card, .feature-card, .service-card').forEach(el => {\n        observer.observe(el);\n    });\n\n    // Smooth scroll for anchor links\n    document.querySelectorAll('a[href^=\"#\"]').forEach(anchor => {\n        anchor.addEventListener('click', function (e) {\n            e.preventDefault();\n            const target = document.querySelector(this.getAttribute('href'));\n            if (target) {\n                target.scrollIntoView({\n                    behavior: 'smooth',\n                    block: 'start'\n                });\n            }\n        });\n    });\n\n    // Button hover sound effects (subtle)\n    document.querySelectorAll('.btn').forEach(btn => {\n        btn.addEventListener('mouseenter', function() {\n            this.style.transform = 'translateY(-2px)';\n        });\n        \n        btn.addEventListener('mouseleave', function() {\n            this.style.transform = 'translateY(0)';\n        });\n    });\n}\n\n// Enhanced search functionality\nfunction initializeSearchFeatures() {\n    const searchInputs = document.querySelectorAll('input[type=\"search\"], input[placeholder*=\"поиск\"], input[placeholder*=\"Поиск\"]');\n    \n    searchInputs.forEach(input => {\n        // Add search icon\n        if (!input.parentElement.querySelector('.search-icon')) {\n            const icon = document.createElement('i');\n            icon.className = 'fas fa-search search-icon';\n            icon.style.cssText = 'position: absolute; right: 12px; top: 50%; transform: translateY(-50%); color: var(--text-muted); pointer-events: none;';\n            \n            input.parentElement.style.position = 'relative';\n            input.parentElement.appendChild(icon);\n            input.style.paddingRight = '40px';\n        }\n\n        // Debounced search\n        let searchTimeout;\n        input.addEventListener('input', function() {\n            clearTimeout(searchTimeout);\n            const loader = this.parentElement.querySelector('.search-loader');\n            \n            if (this.value.length > 2) {\n                searchTimeout = setTimeout(() => {\n                    performSearch(this.value);\n                }, 300);\n            }\n        });\n    });\n}\n\n// Keyboard shortcuts for better UX\nfunction initializeKeyboardShortcuts() {\n    document.addEventListener('keydown', function(e) {\n        // Ctrl/Cmd + K for quick search\n        if ((e.ctrlKey || e.metaKey) && e.key === 'k') {\n            e.preventDefault();\n            const searchInput = document.querySelector('input[type=\"search\"], input[name=\"tracking_number\"]');\n            if (searchInput) {\n                searchInput.focus();\n                searchInput.select();\n            }\n        }\n\n        // Escape to close modals or clear search\n        if (e.key === 'Escape') {\n            const openModal = document.querySelector('.modal.show');\n            if (openModal) {\n                bootstrap.Modal.getInstance(openModal).hide();\n            } else {\n                const searchInput = document.querySelector('input[type=\"search\"]:focus');\n                if (searchInput) {\n                    searchInput.value = '';\n                    searchInput.blur();\n                }\n            }\n        }\n\n        // Enter on focused cards to click primary action\n        if (e.key === 'Enter' && e.target.classList.contains('card')) {\n            const primaryButton = e.target.querySelector('.btn-primary');\n            if (primaryButton) {\n                primaryButton.click();\n            }\n        }\n    });\n}\n\n// Progress indicators for forms\nfunction initializeProgressIndicators() {\n    const forms = document.querySelectorAll('form');\n    \n    forms.forEach(form => {\n        form.addEventListener('submit', function(e) {\n            const submitBtn = form.querySelector('button[type=\"submit\"]');\n            if (submitBtn && !form.querySelector('.is-invalid')) {\n                // Add loading state\n                submitBtn.classList.add('loading');\n                submitBtn.disabled = true;\n                \n                // Store original text\n                const originalText = submitBtn.innerHTML;\n                submitBtn.dataset.originalText = originalText;\n                \n                // Update button text\n                submitBtn.innerHTML = '<i class=\"fas fa-spinner fa-spin me-2\"></i>Обработка...';\n                \n                // Reset after 5 seconds if no redirect\n                setTimeout(() => {\n                    if (submitBtn.classList.contains('loading')) {\n                        submitBtn.classList.remove('loading');\n                        submitBtn.disabled = false;\n                        submitBtn.innerHTML = originalText;\n                    }\n                }, 5000);\n            }\n        });\n    });\n}\n\n// Theme toggle functionality (light/dark mode)\nfunction initializeThemeToggle() {\n    const themeToggle = document.createElement('button');\n    themeToggle.className = 'btn btn-outline-secondary btn-sm me-2';\n    themeToggle.innerHTML = '<i class=\"fas fa-moon\"></i>';\n    themeToggle.title = 'Переключить тему';\n    themeToggle.setAttribute('data-bs-toggle', 'tooltip');\n    \n    // Add to navbar\n    const navButtons = document.querySelector('.navbar-nav:last-child');\n    if (navButtons) {\n        const themeItem = document.createElement('li');\n        themeItem.className = 'nav-item';\n        themeItem.appendChild(themeToggle);\n        navButtons.insertBefore(themeItem, navButtons.firstChild);\n    }\n\n    // Theme toggle functionality\n    themeToggle.addEventListener('click', function() {\n        document.body.classList.toggle('dark-theme');\n        const isDark = document.body.classList.contains('dark-theme');\n        \n        this.innerHTML = isDark ? '<i class=\"fas fa-sun\"></i>' : '<i class=\"fas fa-moon\"></i>';\n        localStorage.setItem('theme', isDark ? 'dark' : 'light');\n    });\n\n    // Load saved theme\n    const savedTheme = localStorage.getItem('theme');\n    if (savedTheme === 'dark') {\n        document.body.classList.add('dark-theme');\n        themeToggle.innerHTML = '<i class=\"fas fa-sun\"></i>';\n    }\n}\n\n// Initialize Bootstrap tooltips\nfunction initializeTooltips() {\n    const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle=\"tooltip\"]'));\n    tooltipTriggerList.map(function(tooltipTriggerEl) {\n        return new bootstrap.Tooltip(tooltipTriggerEl);\n    });\n}\n\n// Initialize Bootstrap popovers\nfunction initializePopovers() {\n    const popoverTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle=\"popover\"]'));\n    popoverTriggerList.map(function(popoverTriggerEl) {\n        return new bootstrap.Popover(popoverTriggerEl);\n    });\n}\n\n// Form validation enhancements\nfunction initializeFormValidation() {\n    const forms = document.querySelectorAll('.needs-validation');\n    \n    Array.prototype.slice.call(forms).forEach(function(form) {\n        form.addEventListener('submit', function(event) {\n            if (!form.checkValidity()) {\n                event.preventDefault();\n                event.stopPropagation();\n                \n                // Focus on first invalid field\n                const firstInvalid = form.querySelector(':invalid');\n                if (firstInvalid) {\n                    firstInvalid.focus();\n                }\n            }\n            \n            form.classList.add('was-validated');\n        }, false);\n    });\n\n    // Real-time validation for specific fields\n    const phoneFields = document.querySelectorAll('input[type=\"tel\"]');\n    phoneFields.forEach(function(field) {\n        field.addEventListener('blur', function() {\n            validatePhone(this);\n        });\n    });\n\n    const emailFields = document.querySelectorAll('input[type=\"email\"]');\n    emailFields.forEach(function(field) {\n        field.addEventListener('blur', function() {\n            validateEmail(this);\n        });\n    });\n}\n\n// Phone number validation\nfunction validatePhone(field) {\n    const phoneRegex = /^\\+7\\s\\(\\d{3}\\)\\s\\d{3}-\\d{2}-\\d{2}$/;\n    const isValid = phoneRegex.test(field.value) || field.value === '';\n    \n    if (isValid) {\n        field.classList.remove('is-invalid');\n        field.classList.add('is-valid');\n    } else {\n        field.classList.remove('is-valid');\n        field.classList.add('is-invalid');\n    }\n    \n    return isValid;\n}\n\n// Email validation\nfunction validateEmail(field) {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    const isValid = emailRegex.test(field.value) || field.value === '';\n    \n    if (isValid) {\n        field.classList.remove('is-invalid');\n        field.classList.add('is-valid');\n    } else {\n        field.classList.remove('is-valid');\n        field.classList.add('is-invalid');\n    }\n    \n    return isValid;\n}\n\n// Auto-refresh functionality for dashboards\nfunction initializeAutoRefresh() {\n    const refreshInterval = 300000; // 5 minutes\n    const currentPath = window.location.pathname;\n    \n    // Only auto-refresh dashboard and analytics pages\n    if (currentPath.includes('/admin') || currentPath.includes('/analytics')) {\n        setInterval(function() {\n            // Check if user is still active (no typing in forms)\n            const activeElement = document.activeElement;\n            const isTyping = activeElement && (\n                activeElement.tagName === 'INPUT' || \n                activeElement.tagName === 'TEXTAREA' || \n                activeElement.tagName === 'SELECT'\n            );\n            \n            if (!isTyping) {\n                location.reload();\n            }\n        }, refreshInterval);\n    }\n}\n\n// Phone number formatting for Kazakhstan numbers\nfunction initializePhoneFormatting() {\n    const phoneInputs = document.querySelectorAll('input[type=\"tel\"], input[name*=\"phone\"]');\n    \n    phoneInputs.forEach(function(input) {\n        input.addEventListener('input', function(e) {\n            formatPhoneNumber(e.target);\n        });\n        \n        input.addEventListener('keydown', function(e) {\n            // Allow: backspace, delete, tab, escape, enter\n            if ([46, 8, 9, 27, 13].indexOf(e.keyCode) !== -1 ||\n                // Allow: Ctrl+A, Ctrl+C, Ctrl+V, Ctrl+X\n                (e.keyCode === 65 && e.ctrlKey === true) ||\n                (e.keyCode === 67 && e.ctrlKey === true) ||\n                (e.keyCode === 86 && e.ctrlKey === true) ||\n                (e.keyCode === 88 && e.ctrlKey === true) ||\n                // Allow: home, end, left, right\n                (e.keyCode >= 35 && e.keyCode <= 39)) {\n                return;\n            }\n            // Ensure that it is a number and stop the keypress\n            if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) && (e.keyCode < 96 || e.keyCode > 105)) {\n                e.preventDefault();\n            }\n        });\n    });\n}\n\n// Format phone number to Kazakhstan format\nfunction formatPhoneNumber(input) {\n    let value = input.value.replace(/\\D/g, '');\n    \n    // Convert 8 to 7 for Kazakhstan numbers\n    if (value.startsWith('8')) {\n        value = '7' + value.slice(1);\n    }\n    \n    // Format Kazakhstan number: +7 (XXX) XXX-XX-XX\n    if (value.startsWith('7') && value.length <= 11) {\n        let formatted = '+7';\n        if (value.length > 1) formatted += ' (' + value.slice(1, 4);\n        if (value.length > 4) formatted += ') ' + value.slice(4, 7);\n        if (value.length > 7) formatted += '-' + value.slice(7, 9);\n        if (value.length > 9) formatted += '-' + value.slice(9, 11);\n        input.value = formatted;\n    } else if (value.length > 11) {\n        // Prevent input of more than 11 digits\n        input.value = input.value.slice(0, -1);\n    }\n}\n\n// Table sorting functionality\nfunction initializeTableSorting() {\n    const sortableHeaders = document.querySelectorAll('th[data-sort]');\n    \n    sortableHeaders.forEach(function(header) {\n        header.style.cursor = 'pointer';\n        header.innerHTML += ' <i class=\"fas fa-sort text-muted\"></i>';\n        \n        header.addEventListener('click', function() {\n            sortTable(this);\n        });\n    });\n}\n\n// Sort table by column\nfunction sortTable(header) {\n    const table = header.closest('table');\n    const tbody = table.querySelector('tbody');\n    const rows = Array.from(tbody.querySelectorAll('tr'));\n    const columnIndex = Array.from(header.parentNode.children).indexOf(header);\n    const sortType = header.getAttribute('data-sort');\n    const currentOrder = header.getAttribute('data-order') || 'asc';\n    const newOrder = currentOrder === 'asc' ? 'desc' : 'asc';\n    \n    // Update header attributes\n    header.setAttribute('data-order', newOrder);\n    \n    // Update sort icons\n    table.querySelectorAll('th i').forEach(function(icon) {\n        icon.className = 'fas fa-sort text-muted';\n    });\n    \n    const icon = header.querySelector('i');\n    icon.className = newOrder === 'asc' ? 'fas fa-sort-up text-primary' : 'fas fa-sort-down text-primary';\n    \n    // Sort rows\n    rows.sort(function(a, b) {\n        const aVal = a.children[columnIndex].textContent.trim();\n        const bVal = b.children[columnIndex].textContent.trim();\n        \n        let result = 0;\n        \n        switch (sortType) {\n            case 'number':\n                result = parseFloat(aVal.replace(/[^\\d.-]/g, '')) - parseFloat(bVal.replace(/[^\\d.-]/g, ''));\n                break;\n            case 'date':\n                result = new Date(aVal) - new Date(bVal);\n                break;\n            default: // text\n                result = aVal.localeCompare(bVal, 'ru');\n                break;\n        }\n        \n        return newOrder === 'asc' ? result : -result;\n    });\n    \n    // Re-append rows\n    rows.forEach(function(row) {\n        tbody.appendChild(row);\n    });\n}\n\n// Notification system\nfunction initializeNotifications() {\n    // Auto-hide alerts after 5 seconds\n    const alerts = document.querySelectorAll('.alert:not(.alert-permanent)');\n    alerts.forEach(function(alert) {\n        setTimeout(function() {\n            const bsAlert = new bootstrap.Alert(alert);\n            bsAlert.close();\n        }, 5000);\n    });\n}\n\n// Utility function to show toast notifications\nfunction showToast(message, type = 'info') {\n    const toastContainer = document.getElementById('toast-container') || createToastContainer();\n    const toastId = 'toast-' + Date.now();\n    \n    const toastHTML = `\n        <div id=\"${toastId}\" class=\"toast align-items-center text-white bg-${type} border-0\" role=\"alert\" aria-live=\"assertive\" aria-atomic=\"true\">\n            <div class=\"d-flex\">\n                <div class=\"toast-body\">\n                    ${message}\n                </div>\n                <button type=\"button\" class=\"btn-close btn-close-white me-2 m-auto\" data-bs-dismiss=\"toast\" aria-label=\"Close\"></button>\n            </div>\n        </div>\n    `;\n    \n    toastContainer.insertAdjacentHTML('beforeend', toastHTML);\n    \n    const toastElement = document.getElementById(toastId);\n    const toast = new bootstrap.Toast(toastElement);\n    toast.show();\n    \n    // Remove toast element after it's hidden\n    toastElement.addEventListener('hidden.bs.toast', function() {\n        toastElement.remove();\n    });\n}\n\n// Create toast container if it doesn't exist\nfunction createToastContainer() {\n    const container = document.createElement('div');\n    container.id = 'toast-container';\n    container.className = 'toast-container position-fixed top-0 end-0 p-3';\n    container.style.zIndex = '9999';\n    document.body.appendChild(container);\n    return container;\n}\n\n// Loading state management\nfunction setLoadingState(element, loading = true) {\n    if (loading) {\n        element.classList.add('loading');\n        element.setAttribute('data-original-text', element.textContent);\n        if (element.tagName === 'BUTTON') {\n            element.innerHTML = '<i class=\"fas fa-spinner fa-spin me-2\"></i>Загрузка...';\n            element.disabled = true;\n        }\n    } else {\n        element.classList.remove('loading');\n        const originalText = element.getAttribute('data-original-text');\n        if (originalText && element.tagName === 'BUTTON') {\n            element.textContent = originalText;\n            element.disabled = false;\n        }\n    }\n}\n\n// Confirmation dialogs\nfunction confirmAction(message, callback) {\n    if (confirm(message)) {\n        callback();\n    }\n}\n\n// Format currency for display\nfunction formatCurrency(amount) {\n    return new Intl.NumberFormat('ru-KZ', {\n        style: 'currency',\n        currency: 'KZT',\n        minimumFractionDigits: 0\n    }).format(amount);\n}\n\n// Format date for display\nfunction formatDate(date, includeTime = false) {\n    const options = {\n        year: 'numeric',\n        month: '2-digit',\n        day: '2-digit'\n    };\n    \n    if (includeTime) {\n        options.hour = '2-digit';\n        options.minute = '2-digit';\n    }\n    \n    return new Date(date).toLocaleDateString('ru-RU', options);\n}\n\n// Copy text to clipboard\nfunction copyToClipboard(text) {\n    navigator.clipboard.writeText(text).then(function() {\n        showToast('Скопировано в буфер обмена', 'success');\n    }).catch(function() {\n        // Fallback for older browsers\n        const textArea = document.createElement('textarea');\n        textArea.value = text;\n        document.body.appendChild(textArea);\n        textArea.select();\n        document.execCommand('copy');\n        document.body.removeChild(textArea);\n        showToast('Скопировано в буфер обмена', 'success');\n    });\n}\n\n// Print functionality\nfunction printElement(elementId) {\n    const printContent = document.getElementById(elementId);\n    const windowPrint = window.open('', '', 'left=0,top=0,width=800,height=900,toolbar=0,scrollbars=0,status=0');\n    \n    windowPrint.document.write(`\n        <!DOCTYPE html>\n        <html>\n        <head>\n            <title>Печать</title>\n            <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\n            <style>\n                @media print {\n                    .no-print { display: none !important; }\n                    .card { border: 1px solid #dee2e6 !important; }\n                }\n            </style>\n        </head>\n        <body>\n            ${printContent.innerHTML}\n        </body>\n        </html>\n    `);\n    \n    windowPrint.document.close();\n    windowPrint.focus();\n    windowPrint.print();\n    windowPrint.close();\n}\n\n// Export table data to CSV\nfunction exportTableToCSV(tableId, filename = 'export.csv') {\n    const table = document.getElementById(tableId);\n    const rows = table.querySelectorAll('tr');\n    const csvContent = [];\n    \n    rows.forEach(function(row) {\n        const cols = row.querySelectorAll('td, th');\n        const rowData = [];\n        \n        cols.forEach(function(col) {\n            rowData.push('\"' + col.textContent.trim().replace(/\"/g, '\"\"') + '\"');\n        });\n        \n        csvContent.push(rowData.join(','));\n    });\n    \n    const blob = new Blob([csvContent.join('\\n')], { type: 'text/csv' });\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = filename;\n    a.click();\n    window.URL.revokeObjectURL(url);\n}\n\n// Keyboard shortcuts\ndocument.addEventListener('keydown', function(e) {\n    // Ctrl + K for global search\n    if (e.ctrlKey && e.key === 'k') {\n        e.preventDefault();\n        const searchInput = document.querySelector('input[name=\"tracking_number\"]');\n        if (searchInput) {\n            searchInput.focus();\n        }\n    }\n    \n    // Esc to close modals\n    if (e.key === 'Escape') {\n        const openModals = document.querySelectorAll('.modal.show');\n        openModals.forEach(function(modal) {\n            const bsModal = bootstrap.Modal.getInstance(modal);\n            if (bsModal) {\n                bsModal.hide();\n            }\n        });\n    }\n});\n\n// Expose utility functions globally\nwindow.HromKZ = {\n    showToast,\n    setLoadingState,\n    confirmAction,\n    formatCurrency,\n    formatDate,\n    copyToClipboard,\n    printElement,\n    exportTableToCSV,\n    formatPhoneNumber: function(value) {\n        const input = { value: value };\n        formatPhoneNumber(input);\n        return input.value;\n    }\n};\n\n// Service Worker registration for offline functionality\nif ('serviceWorker' in navigator) {\n    window.addEventListener('load', function() {\n        navigator.serviceWorker.register('/static/sw.js').then(function(registration) {\n            console.log('SW registered: ', registration);\n        }).catch(function(registrationError) {\n            console.log('SW registration failed: ', registrationError);\n        });\n    });\n}\n","size_bytes":21871}}}